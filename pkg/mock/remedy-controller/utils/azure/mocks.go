// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/remedy-controller/pkg/utils/azure (interfaces: PublicIPAddressUtils,VirtualMachineUtils)
//
// Generated by this command:
//
//	mockgen -package azure -destination=mocks.go github.com/gardener/remedy-controller/pkg/utils/azure PublicIPAddressUtils,VirtualMachineUtils
//

// Package azure is a generated GoMock package.
package azure

import (
	context "context"
	reflect "reflect"

	compute "github.com/Azure/azure-sdk-for-go/services/compute/mgmt/2019-07-01/compute"
	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2018-11-01/network"
	gomock "go.uber.org/mock/gomock"
)

// MockPublicIPAddressUtils is a mock of PublicIPAddressUtils interface.
type MockPublicIPAddressUtils struct {
	ctrl     *gomock.Controller
	recorder *MockPublicIPAddressUtilsMockRecorder
	isgomock struct{}
}

// MockPublicIPAddressUtilsMockRecorder is the mock recorder for MockPublicIPAddressUtils.
type MockPublicIPAddressUtilsMockRecorder struct {
	mock *MockPublicIPAddressUtils
}

// NewMockPublicIPAddressUtils creates a new mock instance.
func NewMockPublicIPAddressUtils(ctrl *gomock.Controller) *MockPublicIPAddressUtils {
	mock := &MockPublicIPAddressUtils{ctrl: ctrl}
	mock.recorder = &MockPublicIPAddressUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicIPAddressUtils) EXPECT() *MockPublicIPAddressUtilsMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPublicIPAddressUtils) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPublicIPAddressUtilsMockRecorder) Delete(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPublicIPAddressUtils)(nil).Delete), ctx, name)
}

// GetAll mocks base method.
func (m *MockPublicIPAddressUtils) GetAll(ctx context.Context) ([]network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPublicIPAddressUtilsMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPublicIPAddressUtils)(nil).GetAll), ctx)
}

// GetByIP mocks base method.
func (m *MockPublicIPAddressUtils) GetByIP(ctx context.Context, ip string) (*network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIP", ctx, ip)
	ret0, _ := ret[0].(*network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIP indicates an expected call of GetByIP.
func (mr *MockPublicIPAddressUtilsMockRecorder) GetByIP(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIP", reflect.TypeOf((*MockPublicIPAddressUtils)(nil).GetByIP), ctx, ip)
}

// GetByName mocks base method.
func (m *MockPublicIPAddressUtils) GetByName(ctx context.Context, name string) (*network.PublicIPAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*network.PublicIPAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockPublicIPAddressUtilsMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockPublicIPAddressUtils)(nil).GetByName), ctx, name)
}

// RemoveFromLoadBalancer mocks base method.
func (m *MockPublicIPAddressUtils) RemoveFromLoadBalancer(ctx context.Context, publicIPAddressIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromLoadBalancer", ctx, publicIPAddressIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromLoadBalancer indicates an expected call of RemoveFromLoadBalancer.
func (mr *MockPublicIPAddressUtilsMockRecorder) RemoveFromLoadBalancer(ctx, publicIPAddressIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromLoadBalancer", reflect.TypeOf((*MockPublicIPAddressUtils)(nil).RemoveFromLoadBalancer), ctx, publicIPAddressIDs)
}

// MockVirtualMachineUtils is a mock of VirtualMachineUtils interface.
type MockVirtualMachineUtils struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineUtilsMockRecorder
	isgomock struct{}
}

// MockVirtualMachineUtilsMockRecorder is the mock recorder for MockVirtualMachineUtils.
type MockVirtualMachineUtilsMockRecorder struct {
	mock *MockVirtualMachineUtils
}

// NewMockVirtualMachineUtils creates a new mock instance.
func NewMockVirtualMachineUtils(ctrl *gomock.Controller) *MockVirtualMachineUtils {
	mock := &MockVirtualMachineUtils{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineUtils) EXPECT() *MockVirtualMachineUtilsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVirtualMachineUtils) Get(ctx context.Context, name string) (*compute.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*compute.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineUtilsMockRecorder) Get(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineUtils)(nil).Get), ctx, name)
}

// Reapply mocks base method.
func (m *MockVirtualMachineUtils) Reapply(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reapply", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reapply indicates an expected call of Reapply.
func (mr *MockVirtualMachineUtilsMockRecorder) Reapply(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reapply", reflect.TypeOf((*MockVirtualMachineUtils)(nil).Reapply), ctx, name)
}
