// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/remedy-controller/pkg/utils/prometheus (interfaces: GaugeVec)
//
// Generated by this command:
//
//	mockgen -package prometheus -destination=mocks.go github.com/gardener/remedy-controller/pkg/utils/prometheus GaugeVec
//

// Package prometheus is a generated GoMock package.
package prometheus

import (
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockGaugeVec is a mock of GaugeVec interface.
type MockGaugeVec struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeVecMockRecorder
	isgomock struct{}
}

// MockGaugeVecMockRecorder is the mock recorder for MockGaugeVec.
type MockGaugeVecMockRecorder struct {
	mock *MockGaugeVec
}

// NewMockGaugeVec creates a new mock instance.
func NewMockGaugeVec(ctrl *gomock.Controller) *MockGaugeVec {
	mock := &MockGaugeVec{ctrl: ctrl}
	mock.recorder = &MockGaugeVecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeVec) EXPECT() *MockGaugeVecMockRecorder {
	return m.recorder
}

// DeleteLabelValues mocks base method.
func (m *MockGaugeVec) DeleteLabelValues(lvs ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteLabelValues", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteLabelValues indicates an expected call of DeleteLabelValues.
func (mr *MockGaugeVecMockRecorder) DeleteLabelValues(lvs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabelValues", reflect.TypeOf((*MockGaugeVec)(nil).DeleteLabelValues), lvs...)
}

// WithLabelValues mocks base method.
func (m *MockGaugeVec) WithLabelValues(lvs ...string) prometheus.Gauge {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockGaugeVecMockRecorder) WithLabelValues(lvs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockGaugeVec)(nil).WithLabelValues), lvs...)
}
